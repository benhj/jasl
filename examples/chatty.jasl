;;; Seeing how easy it is to implement a chatbot
;;; inspired by some POP-11 tutorials.

;;; makes lowercase and removes any trailing punctuation
fn:list normalize(in) -> result {
    lower in -> result;
    rempunc result -> result;
}

fn:bool is_greeting(input) -> maybe {
    list [hi hello yo howdy alright g'day hey] -> L;
    get input(0) -> word;
    member(L, [^word]) -> maybe;
}

fn:list greeting_response() -> greeting {
    list [Hi Hello Yo Howdy Alright G'day] -> L;
    oneof L -> word;
    list [^word] -> greeting;
}

;;; returns true if the input appears to be a question
fn:list is_question_get_word(input) -> word {
    list [is how why whys are may can was were what who whos whose whats hows] -> words;
    get input(0) -> first;

    ;;; Is the first word of the input a member of words?
    find(words, [^first]) -> word;
}

fn:bool is_about_me(input) -> isit {
    member(input, [you]) -> hasyou;
    member(input, [your]) -> hasyour;
    bool (hasyou || hasyour) -> isit;
}

fn:list random_question_response() -> response {
    list [[Why do you think I would know that?]
          [I don't know]
          [not sure]
          [Dunno look on google]
          [Who knows]
          [Good question]] -> L;
    oneof L -> response;    
}

fn:list random_mood_response() -> response {
    list[[Good thanks][Fantastic thanks!][Feeling happy]] -> L;
    oneof L -> response;
}

fn:list random_name_response() -> response {
    string "Bruce" -> name;
    list [[Name's ^name][^name][I'm ^name]
          [People call me ^name]] -> L;
    oneof L -> response;
}

fn:list random_are_your_response(x) -> response {
    list [[I have no opinion on ^^x right now]
          [I'm not sure what my opinion on my ^^x really is]
          [I think my ^^x are doing good]] -> L;
     oneof L -> response;
}

fn:list random_how_is_response(x) -> response {
    list [[^x is doing great far as I know]
          [Not really sure. I think ^x is probably good.]
          [My ^x is doing great thanks]] -> L;
     oneof L -> response;
}


fn:list random_what_is_response(x) -> response {
    list [[What is my ^x hmm Still deciding.]
          [I think my ^x is progressing as usual.]
          [My ^x Right]] -> L;
     oneof L -> response;
}

fn:list process_question(input, word) -> response {
    call is_about_me(input) -> isit;
    if(isit = TRUE) {
        if((word = [what]) || (word = [whats])) {
            if (input = [== name]) {
                call random_name_response() -> response;
            } elseif ((input = [== your ?x]) || (input = [== your ?x ==])) {
                call random_what_is_response(x) -> response;
            }
        } elseif (input = [are you ??x]) {
            list [do i seem ^^x] -> response;
        } elseif ((word = [how]) || (word = [hows])) { 
            if ((input = [= are your ?x]) || (input = [= are your ?x ==])) {
                call random_are_your_response(x) -> response;
            } elseif((input = [= are you]) || (input = [= are you ==])) {
                call random_mood_response() -> response;
            } elseif ((input = [= is your ?x]) || (input = [= is your ?x ==])) {
                call random_how_is_response(x) -> response;
            }
        } else {
            list [a question about me I think] -> response;
        }
    } elseif (isit = FALSE) {
        call random_question_response() -> response;
    }
}

fn:list build_response_and_fact_list(reply, newfact, facts) -> response_and_facts {
    if(newfact /= []) {
        list [^reply [^^facts ^newfact]] -> response_and_facts;
    } elseif (newfact = []) {
        list [^reply [^^facts]] -> response_and_facts;
    }
}

;;; looks at the input and checks the facts to see
;;; if there's anything that can be said about it
fn:list fact_checker_response(key, facts) -> response {
    find(facts, [^^key ==]) -> results;
    if(results = []) {
        find(facts, [== ^^key]) -> results;
    }
    oneof results -> response;
}

fn:list inference_engine(input, facts) -> reply {
    ;;; takes in a list of words and responds by producing a list,
    ;;; assigned to the output variable 'response'. We also
    ;;; return a list of built up facts to serve as a basic
    ;;; memory. Facts will be acted upon in future responses.

    ;;; No new fact to begin with
    list [] -> fact;
    list [] -> response;

    ;;; make lowercase
    call normalize(input) -> input;

    ;;; is the input a question? If so process accordingly.
    call is_question_get_word(input) -> word;
    if (word /= []) {
        call process_question(input, word) -> response;
    } elseif (word = []) {
        call is_greeting(input) -> yes;
        if (yes = TRUE) {
            call greeting_response() -> response;
        } elseif (yes = FALSE) {
            ;;; bug in JASL interpretor. Why should this an elseif branch?
            if (input = [i hate ??x]) {
                list [perhaps you hate yourself] -> response;
                list [you hate ^^x] -> fact;
            }
            elseif (input = [i like ??x]) {
                list [you like ^^x] -> fact;
            }
            elseif (input = [i am ??x]) {
                call fact_checker_response(x, facts) -> response;
                list [you are ^^x] -> fact;
            }
            elseif (input = [your ??x is ??y]) {
                list [my ^^x is ^^y] -> response;
                list response -> fact;
            }
            elseif (input = [you have ??x]) {
                list [i have ^^y] -> response;
                list response -> fact;
            }
            elseif (input = [you are ??x]) {
                list [i am ^^x] -> fact;
                list fact -> response;
            }
            elseif (input = [hello ==]) {
                list [hi] -> response;
            }
            elseif (input = [i ??x you]) {
                list [perhaps in your fantasy we ^^x each other] -> response;
            }
            elseif (input = [??x is ??y]) {
                list [what if ^^x were not ^^y ? ] -> response;
                list [^^x is ^^y] -> fact;
            }
            elseif (input = [??x are ??y]) {
                list input -> fact;
            }
            elseif (input = [bye]) {
                list [I have enjoyed our meeting] -> response;
            } elseif (input = [facts]) {
                prn facts;
            }
            else {
                ;;; input not recognized -- this is the default response.
                list [please go on] -> response;
            }
        }
    }
    call build_response_and_fact_list(response, fact, facts) -> reply;
}

block interface() {
    ;;; This procedure does not take any input when it starts.
    ;;; it repeatedly reads in something typed by the user,
    ;;; gets a response from inference_engine, then prints out
    ;;; the response.
    ;;; It checks whether the user wants to stop, and if so prints
    ;;; a final message and stops.
    list [] -> facts;
    while(TRUE = TRUE) {
        readlist "?: " -> sentence;

        ;;; get the reply from the inference engine
        call inference_engine(sentence, facts) -> reply;

        ;;; and print it out. Note pprn instead of prn for 'pretty print'
        get reply(0) -> response;
        pprn response;

        get reply(1) -> facts;

        ;;; we can test whether to stop now
        if (sentence = [bye]) {
            break;
        }
    }
}

start {
    call interface();
}