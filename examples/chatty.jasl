;;; Seeing how easy it is to implement a chatbot
;;; inspired by some POP-11 tutorials.

;;; makes lowercase and removes any trailing punctuation
fn:list normalize(in) -> result {
    lower in -> result;
    rempunc result -> result;
}

;;; returns true if the input appears to be a question
fn:list is_question_get_word(input) -> word {
    list [is how why are may can was were what who whats hows] -> words;
    get input(0) -> first;

    ;;; Is the first word of the input a member of words?
    find(words, [^first]) -> word;
}

fn:bool is_about_me(input) -> isit {
    member(input, [you]) -> hasyou;
    member(input, [your]) -> hasyour;
    bool (hasyou || hasyour) -> isit;
}

fn:list random_question_response() -> response {
    list [[Why do you think I would know that?]
          [I don't know]
          [not sure]
          [Dunno look on google]
          [Who knows]
          [Good question]] -> L;
    oneof L -> response;    
}

fn:list random_name_response() -> response {
    string "Bruce" -> name;
    list [[Name's ^name][^name][I'm ^name]
          [People call me ^name]] -> L;
    oneof L -> response;
}

fn:list process_question(input, word) -> response {
    
    call is_about_me(input) -> isit;
    if(isit = TRUE) {

        if((word = [what]) || (word = [whats])) {
            if (input = [== name]) {
                call random_name_response() -> response;
            }
        } elseif (input = [are you ??x]) {
            list [do i seem ^^x] -> response;
        } else {
            list [a question about me I think] -> response;
        }
    } elseif (isit = FALSE) {
        call random_question_response() -> response;
    }
}

fn:list inference_engine(input, words) -> response {
    ;;; takes in a list of words and responds by producing a list,
    ;;; assigned to the output variable 'response'

    ;;; make lowercase
    call normalize(input) -> input;

    ;;; is the input a question? If so process accordingly.
    call is_question_get_word(input) -> word;
    length word -> len;
    if (len > 0) {
        call process_question(input, word) -> response;
    } elseif (len = 0) {
        ;;; bug in JASL interpretor. Why should this an elseif branch?
        if (input = [i hate ==]) {
            list [perhaps you hate yourself] -> response;
        }
        elseif (input = [your ??x is ??y]) {
            list [my ^^x is ^^y] -> response;
        }
        elseif (input = [you have ??x]) {
            list [i have ^^y] -> response;
        }
        elseif (input = [you are ??x]) {
            list [i am ^^x] -> response;
        }
        elseif (input = [hello ==]) {
            list [hi] -> response;
        }
        elseif (input = [i ??x you]) {
            list [perhaps in your fantasy we ^^x each other] -> response;
        }
        elseif (input = [??x is ??y]) {
            list [what if ^^x were not ^^y ? ] -> response;
        }
        elseif (input = [bye]) {
            list [I have enjoyed our meeting] -> response;
        } else {
            ;;; input not recognized -- this is the default response.
            list [please go on] -> response;
        }
    }
}

block interface() {
    ;;; This procedure does not take any input when it starts.
    ;;; it repeatedly reads in something typed by the user,
    ;;; gets a response from inference_engine, then prints out
    ;;; the response.
    ;;; It checks whether the user wants to stop, and if so prints
    ;;; a final message and stops.
    list [] -> words;
    while(TRUE = TRUE) {
        readlist "?: " -> sentence;

        ;;; get the reply from the inference engine
        call inference_engine(sentence, words) -> reply;

        ;;; and print it out. Note pprn instead of prn for 'pretty print'
        pprn reply;

        ;;; we can test whether to stop now
        if (sentence = [bye]) {
            break;
        }
    }
}

start {
    call interface();
}