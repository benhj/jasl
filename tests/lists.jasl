fn:string passPrinter(result) -> str {
    if(result == TRUE) {
        string "PASS" -> str;
    } else {
        string "FAIL" -> str;
    }
}

fn:list testMember(results) -> results
{
    ;;; one is a member of the list
    member([one two three], [one]) -> L;
    call passPrinter(L) -> pass;
    list [^^results ^pass] -> results;
}

fn:list testMemberNegative(results) -> results
{
    ;;; four is not a member of the list
    member([one two three], [four]) -> L;
    bool (L = FALSE) -> eval;
    call passPrinter(eval) -> pass;
    list [^^results ^pass] -> results;
}

fn:list testFindA(results) -> results
{
    find ([[animal dog] [animal cat][vehicle car] [vehicle train]],
          [animal ?all]) -> result;
    matches(result, [[animal dog] [animal cat]]) -> test;
    matches(all, [dog cat]) -> test_B;
    bool (test && test_B) -> passb;
    call passPrinter(passb) -> pass;
    list [^^results ^pass] -> results;
}

fn:list testFindB(results) -> results
{
    find ([[animal dog] [animal cat][vehicle car] [vehicle train]],
          [animal ?all]) -> result;

    ;;; now try again but with vehicle, should override the first set
    find ([[animal dog] [animal cat][vehicle car] [vehicle train]],
          [vehicle ?all]) -> result;

    matches(result, [[vehicle car] [vehicle train]]) -> test;
    matches(all, [car train]) -> test_B;
    bool (test && test_B) -> passb;
    call passPrinter(passb) -> pass;
    list [^^results ^pass] -> results;
}

fn:list testFindEqEqThenHH(results) -> results
{
    list [three] -> A;
    find ([[one two three][four five six]], [== ^^A]) -> F;
    matches(F, [[one two three]]) -> test;
    call passPrinter(test) -> pass;
    list [^^results ^pass] -> results;
}

fn:list testFindEqEqHHMiddle(results) -> results
{
    list [tall] -> L;
    list [[trees are one two three tall five six]] -> facts;
    find(facts, [== ^^L ==]) -> F;
    matches(F, [[trees are one two three tall five six]]) -> test;
    call passPrinter(test) -> pass;
    list [^^results ^pass] -> results;
}

fn:list testFindEqEqHHMiddleWithExtract(results) -> results
{
    list [tall] -> L;
    list [[trees are one two three tall five six]] -> facts;
    find(facts, [??x ^^L ??y]) -> F;
    matches(F, [[trees are one two three tall five six]]) -> test;
    matches(x, [trees are one two three]) -> testb;
    matches(y, [five six]) -> testc;
    bool (test && testb) -> res;
    bool (res && testc) -> res;
    call passPrinter(res) -> pass;
    list [^^results ^pass] -> results;
}

fn:list testListBasic(results) -> results
{
    list [one two three] -> L;
    matches(L, [one two three]) -> m;
    call passPrinter(m) -> pass;
    list [^^results ^pass] -> results;
}

fn:list testListPut(results) -> results
{
    list [one two three] -> L;
    put "replaced" -> L(1);
    matches(L, [one replaced three]) -> m;
    call passPrinter(m) -> pass;
    list [^^results ^pass] -> results;
}

fn:list testListGet(results) -> results
{
    list [one two three] -> L;
    get L(2) -> res;
    bool (res == "three") -> m;
    call passPrinter(m) -> pass;
    list [^^results ^pass] -> results;
}

fn:list testListInsertString(results) -> results
{
    list [one two three] -> L;
    string "four" -> f;
    list [^^L ^f] -> L;
    matches(L, [one two three four]) -> m;
    call passPrinter(m) -> pass;
    list [^^results ^pass] -> results;
}

fn:list testListInsertNestedString(results) -> results
{
    list [one two three] -> L;
    string "four" -> f;
    list [^^L [^f]] -> L;
    matches(L, [one two three [four]]) -> m;
    call passPrinter(m) -> pass;
    list [^^results ^pass] -> results;
}

fn:list testListInsertList(results) -> results
{
    list [one two three] -> L;
    list [four five] -> Q;
    list [^^L ^Q] -> L;
    matches(L, [one two three [four five]]) -> m;
    call passPrinter(m) -> pass;
    list [^^results ^pass] -> results;
}

fn:list testListInsertNestedList(results) -> results
{
    list [one two three] -> L;
    list [four five] -> Q;
    list [[^^L] [^Q]] -> L;
    matches(L, [[one two three] [[four five]]]) -> m;
    call passPrinter(m) -> pass;
    list [^^results ^pass] -> results;
}

fn:list testListInsertList_B(results) -> results
{
    list [one two three] -> L;
    list [four five] -> Q;
    list [^^L ^^Q] -> L;
    matches(L, [one two three four five]) -> m;
    call passPrinter(m) -> pass;
    list [^^results ^pass] -> results;
}

fn:list testListEquality(results) -> results
{
    list [one two three] -> A;
    list [one two three] -> B;
    bool (A = B) -> m;
    call passPrinter(m) -> pass;
    list [^^results ^pass] -> results;
}

fn:list testListEqualityAnonymous(results) -> results
{
    list [one two three] -> A;
    list [= = =] -> B;
    bool (A = B) -> m;
    call passPrinter(m) -> pass;
    list [^^results ^pass] -> results;
}

fn:list testListEqualityAnonymousB(results) -> results
{
    bool ([one two three] = [= = =]) -> m;
    call passPrinter(m) -> pass;
    list [^^results ^pass] -> results;
}

fn:list testListEqualityExtract(results) -> results
{
    bool ([one two three] = [?a ?b ?c]) -> ma;
    bool (((a = "one") && (b = "two")) && (c = "three")) -> mb;
    bool (ma && mb) -> mc;
    call passPrinter(mc) -> pass;
    list [^^results ^pass] -> results;
}

fn:list testListEqualityInsert(results) -> results
{
    string "two" -> val;
    bool ([one two three] = [?a ^val ?c]) -> ma;
    bool ((a = "one") && (c = "three")) -> mb;
    bool (ma && mb) -> mc;
    call passPrinter(mc) -> pass;
    list [^^results ^pass] -> results;
}

fn:list testListEqualityInsertList(results) -> results
{
    list [two three] -> toks;
    bool ([one two three] = [?a ^^toks]) -> ma;
    bool (a = "one") -> mb;
    bool (ma && mb) -> mc;
    call passPrinter(mc) -> pass;
    list [^^results ^pass] -> results;
}

fn:list testListEqualityInsertListB(results) -> results
{
    list [two three] -> toks;
    list [four five] -> toksb;
    bool ([one two three four five] = [one ^^toks ^^toksb]) -> ma;
    call passPrinter(ma) -> pass;
    list [^^results ^pass] -> results;
}

fn:list testListEqualityInsertListC(results) -> results
{
    list [two three] -> toks;
    string "four" -> middle;
    list [five six] -> toksb;
    bool ([one two three four five six] = [one ^^toks ^middle ^^toksb]) -> ma;
    call passPrinter(ma) -> pass;
    list [^^results ^pass] -> results;
}

start {
    list [] -> results;
    call testMember(results) -> results;
    call testMemberNegative(results) -> results;
    call testFindA(results) -> results;
    call testFindB(results) -> results;
    call testFindEqEqThenHH(results) -> results;
    call testFindEqEqHHMiddle(results) -> results;
    call testFindEqEqHHMiddleWithExtract(results) -> results;
    call testListBasic(results) -> results;
    call testListPut(results) -> results;
    call testListGet(results) -> results;
    call testListInsertString(results) -> results;
    call testListInsertNestedString(results) -> results;
    call testListInsertList(results) -> results;
    call testListInsertNestedList(results) -> results;
    call testListInsertList_B(results) -> results;
    call testListEquality(results) -> results;
    call testListEqualityAnonymous(results) -> results;
    call testListEqualityAnonymousB(results) -> results;
    call testListEqualityExtract(results) -> results;
    call testListEqualityInsert(results) -> results;
    call testListEqualityInsertList(results) -> results;
    call testListEqualityInsertListB(results) -> results;
    call testListEqualityInsertListC(results) -> results;

    ;;; Generate test summary
    prn results;
    find(results, [FAIL]) -> failures;
    find(results, [PASS]) -> passes;
    length failures -> fc;
    length passes -> pc;
    say fc; prn " failures.";
    say pc; prn " passes.";
}